{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/aw/olympus-labs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aw/olympus-labs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Admin from \"layouts/Admin.js\";\nexport default function Dashboard() {\n  var _useState = useState(\"\"),\n      currentAccount = _useState[0],\n      setCurrentAccount = _useState[1];\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, ethereum, accounts, account;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _window = window, ethereum = _window.ethereum;\n\n              if (ethereum) {\n                _context.next = 6;\n                break;\n              }\n\n              console.log(\"Make sure you have metamask!\");\n              return _context.abrupt(\"return\");\n\n            case 6:\n              console.log(\"We have the ethereum object\", ethereum);\n\n            case 7:\n              _context.next = 9;\n              return ethereum.request({\n                method: 'eth_accounts'\n              });\n\n            case 9:\n              accounts = _context.sent;\n\n              if (accounts.length !== 0) {\n                account = accounts[0];\n                console.log(\"Found an authorized account:\", account);\n                setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n                // and ALREADY had their wallet connected + authorized.\n\n                setupEventListener();\n              } else {\n                console.log(\"No authorized account found\");\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _window2, ethereum, accounts;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _window2 = window, ethereum = _window2.ethereum;\n\n              if (ethereum) {\n                _context2.next = 5;\n                break;\n              }\n\n              alert(\"Get MetaMask!\");\n              return _context2.abrupt(\"return\");\n\n            case 5:\n              _context2.next = 7;\n              return ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 7:\n              accounts = _context2.sent;\n              console.log(\"Connected\", accounts[0]);\n              setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n              // and connected their wallet for the first time.\n\n              setupEventListener();\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 13]]);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var setupEventListener = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _window3, ethereum, provider, signer;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              try {\n                _window3 = window, ethereum = _window3.ethereum;\n\n                if (ethereum) {\n                  provider = new ethers.providers.Web3Provider(ethereum);\n                  signer = provider.getSigner();\n                  console.log(\"Setup event listener!\");\n                } else {\n                  console.log(\"Ethereum object doesn't exist!\");\n                }\n              } catch (error) {\n                console.log(error);\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function setupEventListener() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"w-full lg:w-4/12 px-4 lg:order-3 lg:text-right lg:self-center\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"py-6 px-3 mt-32 sm:mt-0\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: connectWallet,\n          className: \"bg-blueGray-700 active:bg-blueGray-600 uppercase text-white font-bold hover:shadow-md shadow text-xs px-4 py-2 rounded outline-none focus:outline-none sm:mr-2 mb-1 ease-linear transition-all duration-150\",\n          type: \"button\",\n          children: \"Connect\"\n        })\n      })\n    });\n  };\n\n  useEffect(function () {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"flex flex-wrap\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"w-full xl:w-8/12 mb-12 xl:mb-0 px-4\",\n        children: currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsx(\"button\", {\n          className: \"bg-blueGray-700 active:bg-blueGray-600 uppercase text-white font-bold hover:shadow-md shadow text-xs px-4 py-2 rounded outline-none focus:outline-none sm:mr-2 mb-1 ease-linear transition-all duration-150\",\n          type: \"button\",\n          children: \"Check Yields\"\n        })\n      })\n    })\n  });\n}\nDashboard.layout = Admin;","map":null,"metadata":{},"sourceType":"module"}