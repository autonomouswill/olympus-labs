{"ast":null,"code":"var _jsxFileName = \"/Users/aw/olympus-labs/olympus-labs-ui/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [sOhmBalance, setBalance] = useState(0);\n  const rebaseRewardPercent = \"\";\n  const [rebaseRewardAmount, setRewardAmount] = useState(\"\");\n  const earnings = 0;\n  const sOhmTokenAddress = \"0x4F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F\";\n  const stakingContractAddress = \"0xfd31c7d00ca47653c6ce64af53c1571f9c36566a\";\n  const ohmTokenAddress = \"0xfca1d1039383109245324456c7500d7e93b5be26\";\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      loadsOhmBalance();\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const loadsOhmBalance = async () => {\n    var sOhmContract = new ethers.Contract(sOhmTokenAddress, sOhmContractABI);\n    let balance = await sOhmContract.functions.balanceOf(currentAccount);\n    setBalance(ethers.utils.formatEther(balance));\n    var stakingContract = new ethers.Contract(stakingContractAddress, stakingContractABI);\n    const epoch = await stakingContract.functions.epoch().call();\n    const stakingReward = epoch.distribute;\n    const circ = await sOhmContract.functions.circulatingSupply().call();\n    const stakingRebase = Number(stakingReward.toString());\n    const stakingAPY = math.pow(1 + stakingRebase, 365 * 3) - 1;\n    const nextRewardValue = Number(stakingRebase) * sOhmBalance;\n    setRewardAmount(nextRewardValue);\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n\n  const renderYields = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: null,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Check Yields\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Olympus Labs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: currentAccount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderYields()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"PhNQUy0/hJbapsz4AMSq7a/2IDk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/aw/olympus-labs/olympus-labs-ui/src/App.js"],"names":["ethers","React","useEffect","useState","App","currentAccount","setCurrentAccount","sOhmBalance","setBalance","rebaseRewardPercent","rebaseRewardAmount","setRewardAmount","earnings","sOhmTokenAddress","stakingContractAddress","ohmTokenAddress","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","loadsOhmBalance","setupEventListener","sOhmContract","Contract","sOhmContractABI","balance","functions","balanceOf","utils","formatEther","stakingContract","stakingContractABI","epoch","call","stakingReward","distribute","circ","circulatingSupply","stakingRebase","Number","toString","stakingAPY","math","pow","nextRewardValue","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","renderNotConnectedContainer","renderYields"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nconst App = () => {\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [sOhmBalance, setBalance] = useState(0);\n    const rebaseRewardPercent = \"\";\n    const [rebaseRewardAmount, setRewardAmount] = useState(\"\");\n    const earnings = 0;\n    const sOhmTokenAddress = \"0x4F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F\";\n    const stakingContractAddress = \"0xfd31c7d00ca47653c6ce64af53c1571f9c36566a\";\n    const ohmTokenAddress = \"0xfca1d1039383109245324456c7500d7e93b5be26\";\n\n\n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"We have the ethereum object\", ethereum);\n      }\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n\t\t\t\t\tsetCurrentAccount(account);\n          loadsOhmBalance();\n          setupEventListener();\n      } else {\n          console.log(\"No authorized account found\");\n      }\n  }\n\n  const loadsOhmBalance = async () => {\n    var sOhmContract = new ethers.Contract(sOhmTokenAddress, sOhmContractABI)\n    let balance = await sOhmContract.functions.balanceOf(currentAccount);\n    setBalance(ethers.utils.formatEther(balance));\n\n    var stakingContract = new ethers.Contract(stakingContractAddress, stakingContractABI)\n    const epoch = await stakingContract.functions.epoch().call();\n    const stakingReward = epoch.distribute;\n    const circ = await sOhmContract.functions.circulatingSupply().call();\n    const stakingRebase = Number(stakingReward.toString());\n    const stakingAPY = math.pow(1 + stakingRebase, 365*3) - 1;\n\n    const nextRewardValue = Number(stakingRebase) * sOhmBalance;\n\n    setRewardAmount(nextRewardValue);\n\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(\"Setup event listener!\")\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderYields = () => (\n    <button onClick={null} className=\"cta-button connect-wallet-button\">\n      Check Yields\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Olympus Labs</p>\n          <p className=\"sub-text\">\n            {currentAccount}\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderYields()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}